/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package io.kubesure.multistream.datatypes;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

/** Currency deal */
@org.apache.avro.specific.AvroGenerated
public class Deal extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 8974565811854682965L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Deal\",\"namespace\":\"io.kubesure.multistream.datatypes\",\"doc\":\"Currency deal\",\"fields\":[{\"name\":\"purchase\",\"type\":{\"type\":\"record\",\"name\":\"Purchase\",\"doc\":\"currency purchase details\",\"fields\":[{\"name\":\"transactionID\",\"type\":\"string\"},{\"name\":\"transactionDate\",\"type\":\"long\",\"logicalType\":\"local-timestamp-millis\"},{\"name\":\"purchaseCurrency\",\"type\":\"string\"},{\"name\":\"saleCurrency\",\"type\":\"string\"},{\"name\":\"purchaseAmount\",\"type\":\"string\"},{\"name\":\"saleAmount\",\"type\":\"string\"},{\"name\":\"rate\",\"type\":\"float\"},{\"name\":\"rateCode\",\"type\":\"string\"},{\"name\":\"buySell\",\"type\":\"string\"},{\"name\":\"clientID\",\"type\":\"string\"},{\"name\":\"channel\",\"type\":\"string\"}]}},{\"name\":\"payment\",\"type\":{\"type\":\"record\",\"name\":\"Payment\",\"doc\":\"currency payment details\",\"fields\":[{\"name\":\"transactionID\",\"type\":\"string\"},{\"name\":\"transactionDate\",\"type\":\"long\",\"logicalType\":\"local-timestamp-millis\"},{\"name\":\"clientID\",\"type\":\"string\"},{\"name\":\"status\",\"type\":\"string\"},{\"name\":\"account\",\"type\":\"string\"},{\"name\":\"amount\",\"type\":\"float\"},{\"name\":\"referenceNumber\",\"type\":\"string\"}]}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Deal> ENCODER =
      new BinaryMessageEncoder<Deal>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Deal> DECODER =
      new BinaryMessageDecoder<Deal>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Deal> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Deal> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Deal> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Deal>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Deal to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Deal from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Deal instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Deal fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public io.kubesure.multistream.datatypes.Purchase purchase;
  @Deprecated public io.kubesure.multistream.datatypes.Payment payment;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Deal() {}

  /**
   * All-args constructor.
   * @param purchase The new value for purchase
   * @param payment The new value for payment
   */
  public Deal(io.kubesure.multistream.datatypes.Purchase purchase, io.kubesure.multistream.datatypes.Payment payment) {
    this.purchase = purchase;
    this.payment = payment;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return purchase;
    case 1: return payment;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: purchase = (io.kubesure.multistream.datatypes.Purchase)value$; break;
    case 1: payment = (io.kubesure.multistream.datatypes.Payment)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'purchase' field.
   * @return The value of the 'purchase' field.
   */
  public io.kubesure.multistream.datatypes.Purchase getPurchase() {
    return purchase;
  }


  /**
   * Sets the value of the 'purchase' field.
   * @param value the value to set.
   */
  public void setPurchase(io.kubesure.multistream.datatypes.Purchase value) {
    this.purchase = value;
  }

  /**
   * Gets the value of the 'payment' field.
   * @return The value of the 'payment' field.
   */
  public io.kubesure.multistream.datatypes.Payment getPayment() {
    return payment;
  }


  /**
   * Sets the value of the 'payment' field.
   * @param value the value to set.
   */
  public void setPayment(io.kubesure.multistream.datatypes.Payment value) {
    this.payment = value;
  }

  /**
   * Creates a new Deal RecordBuilder.
   * @return A new Deal RecordBuilder
   */
  public static io.kubesure.multistream.datatypes.Deal.Builder newBuilder() {
    return new io.kubesure.multistream.datatypes.Deal.Builder();
  }

  /**
   * Creates a new Deal RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Deal RecordBuilder
   */
  public static io.kubesure.multistream.datatypes.Deal.Builder newBuilder(io.kubesure.multistream.datatypes.Deal.Builder other) {
    if (other == null) {
      return new io.kubesure.multistream.datatypes.Deal.Builder();
    } else {
      return new io.kubesure.multistream.datatypes.Deal.Builder(other);
    }
  }

  /**
   * Creates a new Deal RecordBuilder by copying an existing Deal instance.
   * @param other The existing instance to copy.
   * @return A new Deal RecordBuilder
   */
  public static io.kubesure.multistream.datatypes.Deal.Builder newBuilder(io.kubesure.multistream.datatypes.Deal other) {
    if (other == null) {
      return new io.kubesure.multistream.datatypes.Deal.Builder();
    } else {
      return new io.kubesure.multistream.datatypes.Deal.Builder(other);
    }
  }

  /**
   * RecordBuilder for Deal instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Deal>
    implements org.apache.avro.data.RecordBuilder<Deal> {

    private io.kubesure.multistream.datatypes.Purchase purchase;
    private io.kubesure.multistream.datatypes.Purchase.Builder purchaseBuilder;
    private io.kubesure.multistream.datatypes.Payment payment;
    private io.kubesure.multistream.datatypes.Payment.Builder paymentBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(io.kubesure.multistream.datatypes.Deal.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.purchase)) {
        this.purchase = data().deepCopy(fields()[0].schema(), other.purchase);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (other.hasPurchaseBuilder()) {
        this.purchaseBuilder = io.kubesure.multistream.datatypes.Purchase.newBuilder(other.getPurchaseBuilder());
      }
      if (isValidValue(fields()[1], other.payment)) {
        this.payment = data().deepCopy(fields()[1].schema(), other.payment);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (other.hasPaymentBuilder()) {
        this.paymentBuilder = io.kubesure.multistream.datatypes.Payment.newBuilder(other.getPaymentBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing Deal instance
     * @param other The existing instance to copy.
     */
    private Builder(io.kubesure.multistream.datatypes.Deal other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.purchase)) {
        this.purchase = data().deepCopy(fields()[0].schema(), other.purchase);
        fieldSetFlags()[0] = true;
      }
      this.purchaseBuilder = null;
      if (isValidValue(fields()[1], other.payment)) {
        this.payment = data().deepCopy(fields()[1].schema(), other.payment);
        fieldSetFlags()[1] = true;
      }
      this.paymentBuilder = null;
    }

    /**
      * Gets the value of the 'purchase' field.
      * @return The value.
      */
    public io.kubesure.multistream.datatypes.Purchase getPurchase() {
      return purchase;
    }


    /**
      * Sets the value of the 'purchase' field.
      * @param value The value of 'purchase'.
      * @return This builder.
      */
    public io.kubesure.multistream.datatypes.Deal.Builder setPurchase(io.kubesure.multistream.datatypes.Purchase value) {
      validate(fields()[0], value);
      this.purchaseBuilder = null;
      this.purchase = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'purchase' field has been set.
      * @return True if the 'purchase' field has been set, false otherwise.
      */
    public boolean hasPurchase() {
      return fieldSetFlags()[0];
    }

    /**
     * Gets the Builder instance for the 'purchase' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public io.kubesure.multistream.datatypes.Purchase.Builder getPurchaseBuilder() {
      if (purchaseBuilder == null) {
        if (hasPurchase()) {
          setPurchaseBuilder(io.kubesure.multistream.datatypes.Purchase.newBuilder(purchase));
        } else {
          setPurchaseBuilder(io.kubesure.multistream.datatypes.Purchase.newBuilder());
        }
      }
      return purchaseBuilder;
    }

    /**
     * Sets the Builder instance for the 'purchase' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public io.kubesure.multistream.datatypes.Deal.Builder setPurchaseBuilder(io.kubesure.multistream.datatypes.Purchase.Builder value) {
      clearPurchase();
      purchaseBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'purchase' field has an active Builder instance
     * @return True if the 'purchase' field has an active Builder instance
     */
    public boolean hasPurchaseBuilder() {
      return purchaseBuilder != null;
    }

    /**
      * Clears the value of the 'purchase' field.
      * @return This builder.
      */
    public io.kubesure.multistream.datatypes.Deal.Builder clearPurchase() {
      purchase = null;
      purchaseBuilder = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'payment' field.
      * @return The value.
      */
    public io.kubesure.multistream.datatypes.Payment getPayment() {
      return payment;
    }


    /**
      * Sets the value of the 'payment' field.
      * @param value The value of 'payment'.
      * @return This builder.
      */
    public io.kubesure.multistream.datatypes.Deal.Builder setPayment(io.kubesure.multistream.datatypes.Payment value) {
      validate(fields()[1], value);
      this.paymentBuilder = null;
      this.payment = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'payment' field has been set.
      * @return True if the 'payment' field has been set, false otherwise.
      */
    public boolean hasPayment() {
      return fieldSetFlags()[1];
    }

    /**
     * Gets the Builder instance for the 'payment' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public io.kubesure.multistream.datatypes.Payment.Builder getPaymentBuilder() {
      if (paymentBuilder == null) {
        if (hasPayment()) {
          setPaymentBuilder(io.kubesure.multistream.datatypes.Payment.newBuilder(payment));
        } else {
          setPaymentBuilder(io.kubesure.multistream.datatypes.Payment.newBuilder());
        }
      }
      return paymentBuilder;
    }

    /**
     * Sets the Builder instance for the 'payment' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public io.kubesure.multistream.datatypes.Deal.Builder setPaymentBuilder(io.kubesure.multistream.datatypes.Payment.Builder value) {
      clearPayment();
      paymentBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'payment' field has an active Builder instance
     * @return True if the 'payment' field has an active Builder instance
     */
    public boolean hasPaymentBuilder() {
      return paymentBuilder != null;
    }

    /**
      * Clears the value of the 'payment' field.
      * @return This builder.
      */
    public io.kubesure.multistream.datatypes.Deal.Builder clearPayment() {
      payment = null;
      paymentBuilder = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Deal build() {
      try {
        Deal record = new Deal();
        if (purchaseBuilder != null) {
          try {
            record.purchase = this.purchaseBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("purchase"));
            throw e;
          }
        } else {
          record.purchase = fieldSetFlags()[0] ? this.purchase : (io.kubesure.multistream.datatypes.Purchase) defaultValue(fields()[0]);
        }
        if (paymentBuilder != null) {
          try {
            record.payment = this.paymentBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("payment"));
            throw e;
          }
        } else {
          record.payment = fieldSetFlags()[1] ? this.payment : (io.kubesure.multistream.datatypes.Payment) defaultValue(fields()[1]);
        }
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Deal>
    WRITER$ = (org.apache.avro.io.DatumWriter<Deal>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Deal>
    READER$ = (org.apache.avro.io.DatumReader<Deal>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    this.purchase.customEncode(out);

    this.payment.customEncode(out);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (this.purchase == null) {
        this.purchase = new io.kubesure.multistream.datatypes.Purchase();
      }
      this.purchase.customDecode(in);

      if (this.payment == null) {
        this.payment = new io.kubesure.multistream.datatypes.Payment();
      }
      this.payment.customDecode(in);

    } else {
      for (int i = 0; i < 2; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (this.purchase == null) {
            this.purchase = new io.kubesure.multistream.datatypes.Purchase();
          }
          this.purchase.customDecode(in);
          break;

        case 1:
          if (this.payment == null) {
            this.payment = new io.kubesure.multistream.datatypes.Payment();
          }
          this.payment.customDecode(in);
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










